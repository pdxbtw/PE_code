# Project Euler - Problem 12
# -----------------------------------------------------------------------------
# The sequence of triangle numbers if generated by adding the natural numbers.
# So the 7th triangle number would be 1+2+3+4+5+6+7 = 28. The first ten terms
# would be :triangleNum
# 	 1: 1
# 	 3: 1, 3
# 	 6: 1, 2, 3, 6
# 	10: 1, 2, 5, 10
# 	15: 1, 3, 5, 15
# 	21: 1, 3, 7, 21
# 	28: 1, 2, 4, 7, 14, 28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over 500 divisors?
# ----------------------------------------------------------------------------- 

import time
import math


def triangleFactors(max_val):
    n = 1
    triangleNum = 1
    finished = False
    while not finished:
        n += 1
        triangleNum += n
        factors = 2
        count = 2
        bound = math.sqrt(triangleNum)
        while count < bound:
            if not triangleNum % count:
                factors += 2
            count += 1
        if factors >= max_val:
            finished = True
    return triangleNum

start = time.time()
value = triangleFactors(500)
stop = time.time()
print(value)
print('Time: {} seconds'.format(stop-start))
